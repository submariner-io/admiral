// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/submariner-io/admiral/pkg/federate (interfaces: Federator)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	federate "github.com/submariner-io/admiral/pkg/federate"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// MockFederator is a mock of Federator interface
type MockFederator struct {
	ctrl     *gomock.Controller
	recorder *MockFederatorMockRecorder
}

// MockFederatorMockRecorder is the mock recorder for MockFederator
type MockFederatorMockRecorder struct {
	mock *MockFederator
}

// NewMockFederator creates a new mock instance
func NewMockFederator(ctrl *gomock.Controller) *MockFederator {
	mock := &MockFederator{ctrl: ctrl}
	mock.recorder = &MockFederatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFederator) EXPECT() *MockFederatorMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockFederator) Delete(arg0 runtime.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockFederatorMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFederator)(nil).Delete), arg0)
}

// Distribute mocks base method
func (m *MockFederator) Distribute(arg0 runtime.Object, arg1 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Distribute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Distribute indicates an expected call of Distribute
func (mr *MockFederatorMockRecorder) Distribute(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Distribute", reflect.TypeOf((*MockFederator)(nil).Distribute), varargs...)
}

// WatchClusters mocks base method
func (m *MockFederator) WatchClusters(arg0 federate.ClusterEventHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchClusters", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchClusters indicates an expected call of WatchClusters
func (mr *MockFederatorMockRecorder) WatchClusters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchClusters", reflect.TypeOf((*MockFederator)(nil).WatchClusters), arg0)
}
